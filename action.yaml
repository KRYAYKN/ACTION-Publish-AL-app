name: Publish AL Application

description: Publish the **main** AL application to a Business Central SaaS environment.

inputs:
  CONTAINERNAME:
    description: 'The name of the Business Central container.'
    required: true
  ARTIFACTNAME:
    description: The name of the artifact.
    required: true
  TENANT_ID:
    description: The tenant ID.
    required: true
  ENVIRONMENT_UK:
    description: The target Business Central UK environment.
    required: true
  ENVIRONMENT_DE:
    description: The target Business Central DE environment.
    required: true  
  ENVIRONMENT:
    description: The target Business Central environment.
    required: true    
  REFRESH_TOKEN:
    description: The refresh token for authentication.
    required: true
  ArtifactsDirectory:
    description: Path to the artifacts directory.
    required: true
  CLIENT_ID:
    description: The client ID for authentication.
    required: true
  CLIENT_SECRET:
    description: The client secret for authentication.
    required: true  

runs:
  using: "composite"
  steps:
    - name: Publish Main Application
      shell: pwsh
      run: |
        $ArtifactsDirectory = "${{ inputs.ArtifactsDirectory }}"
        $containerName = "${{ inputs.CONTAINERNAME }}"
        $artifactName = "${{ inputs.ARTIFACTNAME }}"
        $tenantID = "${{ inputs.TENANT_ID }}"
        $environment = "${{ inputs.ENVIRONMENT }}"
        $refreshToken = "${{ inputs.REFRESH_TOKEN }}"
        $clientID = "${{ inputs.CLIENT_ID }}"
        $clientSecret = "${{ inputs.CLIENT_SECRET }}"

        Write-Host "ðŸ“¦ YalnÄ±zca main app SaaS ortamÄ±na publish ediliyor - Tenant: $tenantID, Environment: $environment"

        $mainApp = Get-ChildItem -Path $ArtifactsDirectory -Filter "SGBC.app" | Select-Object -First 1

        if (-not $mainApp) {
            Write-Host "::error::Main app bulunamadÄ±: $ArtifactsDirectory/SGBC.app"
            exit 1
        }

        $authContext = New-BcAuthContext `
        -clientID $clientID `
        -clientSecret $clientSecret `
        -tenantID $tenantID
        
        if (-not $authContext) {
            Write-Host "::error::Auth context oluÅŸturulamadÄ±"
            exit 1
        }

        Write-Host "ðŸ”„ YayÄ±nlanÄ±yor: $($mainApp.FullName)"
        Publish-PerTenantExtensionApps `
            -bcAuthContext $authContext `
            -environment $environment `
            -appFiles $mainApp.FullName `
            -schemaSyncMode Force

        Write-Host "âœ… YayÄ±nlama tamamlandÄ±."

    - name: Generate build-artifact.json After Publish
      shell: pwsh
      run: |
        $branchName = $env:GITHUB_HEAD_REF
        if (-not $branchName) { 
          $branchName = $env:GITHUB_REF -replace 'refs/heads/', ''
        }

        if ($branchName -match '^feature\/(?<ticket>[A-Z]+-\d+)') {
            $jiraTicket = $Matches.ticket
        } else {
            $jiraTicket = "unknown"
        }

        $publishedApps = Get-BcEnvironmentExtensionApps `
            -bcAuthContext (New-BcAuthContext -clientID "${{ inputs.CLIENT_ID }}" -clientSecret "${{ inputs.CLIENT_SECRET }}" -tenantID "${{ inputs.TENANT_ID }}") `
            -environment "${{ inputs.ENVIRONMENT }}"

        $publishedAppsInfo = $publishedApps | ForEach-Object {
          @{
            name      = $_.Name
            publisher = $_.Publisher
            id        = $_.AppId
            version   = $_.Version
          }
        }

        $artifact = @{
          Story = $jiraTicket
          PublishedApps = $publishedAppsInfo
        }

        $artifactPath = Join-Path "${{ inputs.ArtifactsDirectory }}" "build-artifact.json"
        $artifact | ConvertTo-Json -Depth 10 | Set-Content -Encoding UTF8 -Path $artifactPath

        Write-Host "âœ… build-artifact.json created at: $artifactPath"

    - name: Upload build-artifact.json
      uses: actions/upload-artifact@v4
      with:
        name: build-metadata
        path: ${{ inputs.ArtifactsDirectory }}/build-artifact.json
