name: Publish AL Application

description: Publish the main AL application to a Business Central SaaS environment and generate build-artifact.json only for the published app.

inputs:
  CONTAINERNAME:
    description: 'The name of the Business Central container.'
    required: true
  ARTIFACTNAME:
    description: The name of the artifact.
    required: true
  TENANT_ID:
    description: The tenant ID.
    required: true
  ENVIRONMENT_UK:
    description: The target Business Central UK environment.
    required: true
  ENVIRONMENT_DE:
    description: The target Business Central DE environment.
    required: true
  ENVIRONMENT:
    description: The target Business Central environment.
    required: true
  REFRESH_TOKEN:
    description: The refresh token for authentication.
    required: true
  ArtifactsDirectory:
    description: Path to the artifacts directory.
    required: true
  CLIENT_ID:
    description: The client ID for authentication.
    required: true
  CLIENT_SECRET:
    description: The client secret for authentication.
    required: true

runs:
  using: "composite"
  steps:
    - name: Publish Main Application
      shell: pwsh
      run: |
        try {
            $ArtifactsDirectory = "${{ inputs.ArtifactsDirectory }}"
            $tenantID = "${{ inputs.TENANT_ID }}"
            $environment = "${{ inputs.ENVIRONMENT }}"
            $clientID = "${{ inputs.CLIENT_ID }}"
            $clientSecret = "${{ inputs.CLIENT_SECRET }}"

            Write-Host "üì¶ Publishing Main app to SaaS environment - Tenant: $tenantID, Environment: $environment"

            $mainApp = Get-ChildItem -Path $ArtifactsDirectory -Filter "SGBC.app" | Select-Object -First 1
            if (-not $mainApp) {
                throw "Main App (.app) file not found in artifacts directory!"
            }

            $authContext = New-BcAuthContext `
                -clientID $clientID `
                -clientSecret $clientSecret `
                -tenantID $tenantID

            if (-not $authContext) {
                throw "Failed to create authentication context."
            }

            Publish-PerTenantExtensionApps `
                -bcAuthContext $authContext `
                -environment $environment `
                -appFiles $mainApp.FullName `
                -schemaSyncMode Force

            Write-Host "‚úÖ Main App published to SaaS successfully."
        }
        catch {
            Write-Error "‚ùå Error during SaaS Publish: $_"
            exit 1
        }

    - name: Generate build-artifact.json for Published App
      shell: pwsh
      run: |
        try {
            $ArtifactsDirectory = "${{ inputs.ArtifactsDirectory }}"
            $appPath = Join-Path $ArtifactsDirectory "SGBC.app"

            # Fallback logic to get true branch name
            $branchName = $env:GITHUB_HEAD_REF
            if (-not $branchName) {
              $branchName = $env:GITHUB_REF -replace 'refs/heads/', '' -replace 'refs/pull/.*/merge', ''
            }

            Write-Host "üåø Detected branch: $branchName"

            if ($branchName -match 'feature[/-](?<ticket>[A-Z]+-\d+)' ) {
                $jiraTicket = $Matches.ticket
            } else {
                $jiraTicket = "unknown"
            }

            $appInfo = Get-AppJsonFromAppFile -appFile $appPath

            if (-not $appInfo) {
                throw "Failed to extract app.json from $appPath"
            }

            $publishedAppsInfo = @(
                @{
                    name      = $appInfo.name
                    publisher = $appInfo.publisher
                    id        = $appInfo.id
                    version   = $appInfo.version
                }
            )

            $artifact = @{
              Story = $jiraTicket
              PublishedApps = $publishedAppsInfo
            }

            $artifactPath = Join-Path $ArtifactsDirectory "build-artifact.json"
            $artifact | ConvertTo-Json -Depth 10 | Set-Content -Encoding UTF8 -Path $artifactPath

            Write-Host "‚úÖ build-artifact.json created at: $artifactPath"
        }
        catch {
            Write-Error "‚ùå Error during build-artifact.json generation: $_"
            exit 1
        }

    - name: Upload build-artifact.json
      uses: actions/upload-artifact@v4
      with:
        name: build-metadata
        path: ${{ inputs.ArtifactsDirectory }}/build-artifact.json
